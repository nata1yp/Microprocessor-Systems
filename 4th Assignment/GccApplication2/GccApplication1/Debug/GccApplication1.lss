
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000061f  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000054e  00000000  00000000  000007f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029c  00000000  00000000  00000d45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000fe4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000328  00000000  00000000  00001008  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000263  00000000  00000000  00001330  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001593  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
	char x,A,B,C,D,F0,F1;
	DDRA=0xFF; // use PORTA as output
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	DDRB=0x00; // use PORTB as input
  70:	17 ba       	out	0x17, r1	; 23
		C = C>>2;
		D = x & 0x08;		//D is PB3
		D = D>>3;
		
		F0 = !( (A && !B ) || (B && !C && D));	//calculation of F0
		F1 = ((A || C) && (B || D));			//calculation of F1
  72:	60 e0       	ldi	r22, 0x00	; 0
  74:	51 e0       	ldi	r21, 0x01	; 1
	DDRB=0x00; // use PORTB as input

	/* Replace with your application code */
	while (1)
	{
		x = PINB & 0x0F;	//isolation of the 4 LSBs
  76:	86 b3       	in	r24, 0x16	; 22
		A = x & 0x01;		//A is PB0
		B = x & 0x02;		//B is PB1
		B = B>>1;
  78:	81 fb       	bst	r24, 1
  7a:	22 27       	eor	r18, r18
  7c:	20 f9       	bld	r18, 0
		C = x & 0x04;		//C is PB2
		C = C>>2;
  7e:	82 fb       	bst	r24, 2
  80:	99 27       	eor	r25, r25
  82:	90 f9       	bld	r25, 0
		D = x & 0x08;		//D is PB3
		D = D>>3;
  84:	83 fb       	bst	r24, 3
  86:	33 27       	eor	r19, r19
  88:	30 f9       	bld	r19, 0
		
		F0 = !( (A && !B ) || (B && !C && D));	//calculation of F0
  8a:	48 2f       	mov	r20, r24
  8c:	41 70       	andi	r20, 0x01	; 1
  8e:	80 ff       	sbrs	r24, 0
  90:	04 c0       	rjmp	.+8      	; 0x9a <main+0x2e>
  92:	21 11       	cpse	r18, r1
  94:	04 c0       	rjmp	.+8      	; 0x9e <main+0x32>
  96:	96 2f       	mov	r25, r22
  98:	08 c0       	rjmp	.+16     	; 0xaa <main+0x3e>
  9a:	22 23       	and	r18, r18
  9c:	f9 f0       	breq	.+62     	; 0xdc <main+0x70>
  9e:	91 11       	cpse	r25, r1
  a0:	21 c0       	rjmp	.+66     	; 0xe4 <main+0x78>
  a2:	33 23       	and	r19, r19
  a4:	19 f1       	breq	.+70     	; 0xec <main+0x80>
  a6:	16 c0       	rjmp	.+44     	; 0xd4 <main+0x68>
  a8:	96 2f       	mov	r25, r22
		F1 = ((A || C) && (B || D));			//calculation of F1
  aa:	21 11       	cpse	r18, r1
  ac:	06 c0       	rjmp	.+12     	; 0xba <main+0x4e>
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <main+0x46>
		C = x & 0x04;		//C is PB2
		C = C>>2;
		D = x & 0x08;		//D is PB3
		D = D>>3;
		
		F0 = !( (A && !B ) || (B && !C && D));	//calculation of F0
  b0:	95 2f       	mov	r25, r21
		F1 = ((A || C) && (B || D));			//calculation of F1
  b2:	31 11       	cpse	r19, r1
  b4:	04 c0       	rjmp	.+8      	; 0xbe <main+0x52>
  b6:	86 2f       	mov	r24, r22
  b8:	09 c0       	rjmp	.+18     	; 0xcc <main+0x60>
  ba:	85 2f       	mov	r24, r21
  bc:	07 c0       	rjmp	.+14     	; 0xcc <main+0x60>
  be:	85 2f       	mov	r24, r21
  c0:	05 c0       	rjmp	.+10     	; 0xcc <main+0x60>
		C = x & 0x04;		//C is PB2
		C = C>>2;
		D = x & 0x08;		//D is PB3
		D = D>>3;
		
		F0 = !( (A && !B ) || (B && !C && D));	//calculation of F0
  c2:	95 2f       	mov	r25, r21
		F1 = ((A || C) && (B || D));			//calculation of F1
  c4:	85 2f       	mov	r24, r21
  c6:	02 c0       	rjmp	.+4      	; 0xcc <main+0x60>
		C = x & 0x04;		//C is PB2
		C = C>>2;
		D = x & 0x08;		//D is PB3
		D = D>>3;
		
		F0 = !( (A && !B ) || (B && !C && D));	//calculation of F0
  c8:	95 2f       	mov	r25, r21
		F1 = ((A || C) && (B || D));			//calculation of F1
  ca:	85 2f       	mov	r24, r21
		F1 = F1<<1;
		
		PORTA = (F0 | F1);	//output
  cc:	88 0f       	add	r24, r24
  ce:	89 2b       	or	r24, r25
  d0:	8b bb       	out	0x1b, r24	; 27
	}
  d2:	d1 cf       	rjmp	.-94     	; 0x76 <main+0xa>
		C = C>>2;
		D = x & 0x08;		//D is PB3
		D = D>>3;
		
		F0 = !( (A && !B ) || (B && !C && D));	//calculation of F0
		F1 = ((A || C) && (B || D));			//calculation of F1
  d4:	41 11       	cpse	r20, r1
  d6:	e8 cf       	rjmp	.-48     	; 0xa8 <main+0x3c>
		C = x & 0x04;		//C is PB2
		C = C>>2;
		D = x & 0x08;		//D is PB3
		D = D>>3;
		
		F0 = !( (A && !B ) || (B && !C && D));	//calculation of F0
  d8:	96 2f       	mov	r25, r22
  da:	ed cf       	rjmp	.-38     	; 0xb6 <main+0x4a>
		F1 = ((A || C) && (B || D));			//calculation of F1
  dc:	91 11       	cpse	r25, r1
  de:	e8 cf       	rjmp	.-48     	; 0xb0 <main+0x44>
		C = x & 0x04;		//C is PB2
		C = C>>2;
		D = x & 0x08;		//D is PB3
		D = D>>3;
		
		F0 = !( (A && !B ) || (B && !C && D));	//calculation of F0
  e0:	95 2f       	mov	r25, r21
  e2:	e9 cf       	rjmp	.-46     	; 0xb6 <main+0x4a>
		F1 = ((A || C) && (B || D));			//calculation of F1
  e4:	41 11       	cpse	r20, r1
  e6:	ed cf       	rjmp	.-38     	; 0xc2 <main+0x56>
		C = x & 0x04;		//C is PB2
		C = C>>2;
		D = x & 0x08;		//D is PB3
		D = D>>3;
		
		F0 = !( (A && !B ) || (B && !C && D));	//calculation of F0
  e8:	95 2f       	mov	r25, r21
  ea:	df cf       	rjmp	.-66     	; 0xaa <main+0x3e>
		F1 = ((A || C) && (B || D));			//calculation of F1
  ec:	41 11       	cpse	r20, r1
  ee:	ec cf       	rjmp	.-40     	; 0xc8 <main+0x5c>
		C = x & 0x04;		//C is PB2
		C = C>>2;
		D = x & 0x08;		//D is PB3
		D = D>>3;
		
		F0 = !( (A && !B ) || (B && !C && D));	//calculation of F0
  f0:	95 2f       	mov	r25, r21
  f2:	e1 cf       	rjmp	.-62     	; 0xb6 <main+0x4a>

000000f4 <_exit>:
  f4:	f8 94       	cli

000000f6 <__stop_program>:
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <__stop_program>
