
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005d1  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000054e  00000000  00000000  00000771  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000254  00000000  00000000  00000cbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000336  00000000  00000000  00000f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000043  00000000  00000000  0000126e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000012b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>


int main(void)
{
	DDRA=0x00; // use PORTA as input
  6c:	1a ba       	out	0x1a, r1	; 26
	DDRB=0xFF; // use PORTB as output
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	87 bb       	out	0x17, r24	; 23
	char current_state=0x01;
	PORTB = current_state;				//initial state is PB0 on
  72:	81 e0       	ldi	r24, 0x01	; 1
  74:	88 bb       	out	0x18, r24	; 24
			PORTB = current_state;
		}
		if((PINA & 0x04) == 4){			//check if SW2 is pressed
			while((PINA & 0x04) == 4);	//wait until it is released
			current_state=0x01;			//turn on PB0
			PORTB = current_state;
  76:	91 e0       	ldi	r25, 0x01	; 1
		}
		if((PINA & 0x08) == 8){			//check if SW3 is pressed
			while((PINA & 0x08) == 8);	//wait until it is released
			current_state=0x80;			//turn on PB7
			PORTB = current_state;
  78:	20 e8       	ldi	r18, 0x80	; 128
	DDRB=0xFF; // use PORTB as output
	char current_state=0x01;
	PORTB = current_state;				//initial state is PB0 on
	while (1)
	{
		if((PINA & 0x01) == 1){			//check if SW0 is pressed
  7a:	c8 9b       	sbis	0x19, 0	; 25
  7c:	08 c0       	rjmp	.+16     	; 0x8e <main+0x22>
			while((PINA & 0x01) == 1);	//wait until it is released
  7e:	c8 99       	sbic	0x19, 0	; 25
  80:	fe cf       	rjmp	.-4      	; 0x7e <main+0x12>
			if(current_state==0x01)		//if PB0 is on the turn on PB7
  82:	81 30       	cpi	r24, 0x01	; 1
  84:	11 f0       	breq	.+4      	; 0x8a <main+0x1e>
			current_state=0x80;
			else
			current_state=current_state>>1; //else shift right
  86:	86 95       	lsr	r24
  88:	01 c0       	rjmp	.+2      	; 0x8c <main+0x20>
	while (1)
	{
		if((PINA & 0x01) == 1){			//check if SW0 is pressed
			while((PINA & 0x01) == 1);	//wait until it is released
			if(current_state==0x01)		//if PB0 is on the turn on PB7
			current_state=0x80;
  8a:	80 e8       	ldi	r24, 0x80	; 128
			else
			current_state=current_state>>1; //else shift right
			PORTB = current_state;
  8c:	88 bb       	out	0x18, r24	; 24
		}
		if((PINA & 0x02) == 2){			//check if SW1 is pressed
  8e:	c9 9b       	sbis	0x19, 1	; 25
  90:	08 c0       	rjmp	.+16     	; 0xa2 <main+0x36>
			while((PINA & 0x02) == 2);	//wait until it is released
  92:	c9 99       	sbic	0x19, 1	; 25
  94:	fe cf       	rjmp	.-4      	; 0x92 <main+0x26>
			if(current_state==0x80)		//if PB7 is on the turn on PB0
  96:	80 38       	cpi	r24, 0x80	; 128
  98:	11 f0       	breq	.+4      	; 0x9e <main+0x32>
			current_state=0x01;
			else
			current_state=current_state<<1; //else shift left
  9a:	88 0f       	add	r24, r24
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <main+0x34>
			PORTB = current_state;
		}
		if((PINA & 0x02) == 2){			//check if SW1 is pressed
			while((PINA & 0x02) == 2);	//wait until it is released
			if(current_state==0x80)		//if PB7 is on the turn on PB0
			current_state=0x01;
  9e:	81 e0       	ldi	r24, 0x01	; 1
			else
			current_state=current_state<<1; //else shift left
			PORTB = current_state;
  a0:	88 bb       	out	0x18, r24	; 24
		}
		if((PINA & 0x04) == 4){			//check if SW2 is pressed
  a2:	ca 9b       	sbis	0x19, 2	; 25
  a4:	04 c0       	rjmp	.+8      	; 0xae <main+0x42>
			while((PINA & 0x04) == 4);	//wait until it is released
  a6:	ca 99       	sbic	0x19, 2	; 25
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <main+0x3a>
			current_state=0x01;			//turn on PB0
			PORTB = current_state;
  aa:	98 bb       	out	0x18, r25	; 24
			current_state=current_state<<1; //else shift left
			PORTB = current_state;
		}
		if((PINA & 0x04) == 4){			//check if SW2 is pressed
			while((PINA & 0x04) == 4);	//wait until it is released
			current_state=0x01;			//turn on PB0
  ac:	81 e0       	ldi	r24, 0x01	; 1
			PORTB = current_state;
		}
		if((PINA & 0x08) == 8){			//check if SW3 is pressed
  ae:	cb 9b       	sbis	0x19, 3	; 25
  b0:	e4 cf       	rjmp	.-56     	; 0x7a <main+0xe>
			while((PINA & 0x08) == 8);	//wait until it is released
  b2:	cb 99       	sbic	0x19, 3	; 25
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <main+0x46>
			current_state=0x80;			//turn on PB7
			PORTB = current_state;
  b6:	28 bb       	out	0x18, r18	; 24
			current_state=0x01;			//turn on PB0
			PORTB = current_state;
		}
		if((PINA & 0x08) == 8){			//check if SW3 is pressed
			while((PINA & 0x08) == 8);	//wait until it is released
			current_state=0x80;			//turn on PB7
  b8:	80 e8       	ldi	r24, 0x80	; 128
  ba:	df cf       	rjmp	.-66     	; 0x7a <main+0xe>

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
